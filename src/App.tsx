import React, { useState } from 'react';
import { SearchBox } from './components/SearchBox';
import { ChatMessage } from './components/ChatMessage';
import { ChatMessage as ChatMessageType } from './types';
import { Database } from 'lucide-react';
import { SettingsPanel } from './components/Settings/SettingsPanel';

function App() {
  const [messages, setMessages] = useState<ChatMessageType[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  const handleSearch = async (query: string) => {
    setIsLoading(true);
    setMessages(prev => [...prev, { role: 'user', content: query }]);

    try {
      // In a real implementation, this would call your local LLM and vector search
      const response = await new Promise<ChatMessageType>(resolve => 
        setTimeout(() => resolve({
          role: 'assistant',
          content: 'This is a placeholder response. In a real implementation, this would be generated by your local LLM using the retrieved context from your Confluence knowledge base.',
          references: []
        }), 1000)
      );

      setMessages(prev => [...prev, response]);
    } catch (error) {
      console.error('Search failed:', error);
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: 'Sorry, something went wrong while processing your query. Please try again.'
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8">
          <div className="flex items-center space-x-3">
            <Database className="h-8 w-8 text-blue-500" />
            <h1 className="text-xl font-semibold text-gray-900">
              Confluence Knowledge Base
            </h1>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 py-8 sm:px-6 lg:px-8">
        <div className="flex flex-col items-center space-y-8">
          <SearchBox onSearch={handleSearch} isLoading={isLoading} />
          
          <div className="w-full max-w-3xl space-y-4">
            {messages.map((message, index) => (
              <ChatMessage key={index} {...message} />
            ))}
          </div>
        </div>
      </main>

      <SettingsPanel />
    </div>
  );
}

export default App;